/**
 * This class is generated by jOOQ
 */
package com.iodesystems.ferret.db;


import com.iodesystems.ferret.db.tables.DataSource;
import com.iodesystems.ferret.db.tables.Field;
import com.iodesystems.ferret.db.tables.Schema;
import com.iodesystems.ferret.db.tables.SchemaVersion;
import com.iodesystems.ferret.db.tables.Table;
import com.iodesystems.ferret.db.tables.User;
import com.iodesystems.ferret.db.tables.records.DataSourceRecord;
import com.iodesystems.ferret.db.tables.records.FieldRecord;
import com.iodesystems.ferret.db.tables.records.SchemaRecord;
import com.iodesystems.ferret.db.tables.records.SchemaVersionRecord;
import com.iodesystems.ferret.db.tables.records.TableRecord;
import com.iodesystems.ferret.db.tables.records.UserRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>ferret</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<DataSourceRecord, Integer> IDENTITY_DATA_SOURCE = Identities0.IDENTITY_DATA_SOURCE;
    public static final Identity<FieldRecord, Integer> IDENTITY_FIELD = Identities0.IDENTITY_FIELD;
    public static final Identity<SchemaRecord, Integer> IDENTITY_SCHEMA = Identities0.IDENTITY_SCHEMA;
    public static final Identity<TableRecord, Integer> IDENTITY_TABLE = Identities0.IDENTITY_TABLE;
    public static final Identity<UserRecord, Integer> IDENTITY_USER = Identities0.IDENTITY_USER;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DataSourceRecord> DATA_SOURCE_PKEY = UniqueKeys0.DATA_SOURCE_PKEY;
    public static final UniqueKey<FieldRecord> FIELD_PKEY = UniqueKeys0.FIELD_PKEY;
    public static final UniqueKey<SchemaRecord> SCHEMA_PKEY = UniqueKeys0.SCHEMA_PKEY;
    public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = UniqueKeys0.SCHEMA_VERSION_PK;
    public static final UniqueKey<TableRecord> TABLE_PKEY = UniqueKeys0.TABLE_PKEY;
    public static final UniqueKey<UserRecord> USER_PKEY = UniqueKeys0.USER_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FieldRecord, TableRecord> FIELD__FIELD_TABLE_ID_FKEY = ForeignKeys0.FIELD__FIELD_TABLE_ID_FKEY;
    public static final ForeignKey<SchemaRecord, DataSourceRecord> SCHEMA__SCHEMA_DATA_SOURCE_ID_FKEY = ForeignKeys0.SCHEMA__SCHEMA_DATA_SOURCE_ID_FKEY;
    public static final ForeignKey<TableRecord, SchemaRecord> TABLE__TABLE_SCHEMA_ID_FKEY = ForeignKeys0.TABLE__TABLE_SCHEMA_ID_FKEY;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 extends AbstractKeys {
        public static Identity<DataSourceRecord, Integer> IDENTITY_DATA_SOURCE = createIdentity(DataSource.DATA_SOURCE, DataSource.DATA_SOURCE.ID);
        public static Identity<FieldRecord, Integer> IDENTITY_FIELD = createIdentity(Field.FIELD, Field.FIELD.ID);
        public static Identity<SchemaRecord, Integer> IDENTITY_SCHEMA = createIdentity(Schema.SCHEMA, Schema.SCHEMA.ID);
        public static Identity<TableRecord, Integer> IDENTITY_TABLE = createIdentity(Table.TABLE, Table.TABLE.ID);
        public static Identity<UserRecord, Integer> IDENTITY_USER = createIdentity(User.USER, User.USER.ID);
    }

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<DataSourceRecord> DATA_SOURCE_PKEY = createUniqueKey(DataSource.DATA_SOURCE, "data_source_pkey", DataSource.DATA_SOURCE.ID);
        public static final UniqueKey<FieldRecord> FIELD_PKEY = createUniqueKey(Field.FIELD, "field_pkey", Field.FIELD.ID);
        public static final UniqueKey<SchemaRecord> SCHEMA_PKEY = createUniqueKey(Schema.SCHEMA, "schema_pkey", Schema.SCHEMA.ID);
        public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = createUniqueKey(SchemaVersion.SCHEMA_VERSION, "schema_version_pk", SchemaVersion.SCHEMA_VERSION.INSTALLED_RANK);
        public static final UniqueKey<TableRecord> TABLE_PKEY = createUniqueKey(Table.TABLE, "table_pkey", Table.TABLE.ID);
        public static final UniqueKey<UserRecord> USER_PKEY = createUniqueKey(User.USER, "user_pkey", User.USER.ID);
    }

    private static class ForeignKeys0 extends AbstractKeys {
        public static final ForeignKey<FieldRecord, TableRecord> FIELD__FIELD_TABLE_ID_FKEY = createForeignKey(com.iodesystems.ferret.db.Keys.TABLE_PKEY, Field.FIELD, "field__field_table_id_fkey", Field.FIELD.TABLE_ID);
        public static final ForeignKey<SchemaRecord, DataSourceRecord> SCHEMA__SCHEMA_DATA_SOURCE_ID_FKEY = createForeignKey(com.iodesystems.ferret.db.Keys.DATA_SOURCE_PKEY, Schema.SCHEMA, "schema__schema_data_source_id_fkey", Schema.SCHEMA.DATA_SOURCE_ID);
        public static final ForeignKey<TableRecord, SchemaRecord> TABLE__TABLE_SCHEMA_ID_FKEY = createForeignKey(com.iodesystems.ferret.db.Keys.SCHEMA_PKEY, Table.TABLE, "table__table_schema_id_fkey", Table.TABLE.SCHEMA_ID);
    }
}
