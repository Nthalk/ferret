/**
 * This class is generated by jOOQ
 */
package com.iodesystems.ferret.db.tables;


import com.iodesystems.ferret.db.Ferret;
import com.iodesystems.ferret.db.Keys;
import com.iodesystems.ferret.db.tables.records.TableRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Table extends TableImpl<TableRecord> {

    private static final long serialVersionUID = 1155762149;

    /**
     * The reference instance of <code>ferret.table</code>
     */
    public static final Table TABLE = new Table();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableRecord> getRecordType() {
        return TableRecord.class;
    }

    /**
     * The column <code>ferret.table.id</code>.
     */
    public final TableField<TableRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('table_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>ferret.table.schema_id</code>.
     */
    public final TableField<TableRecord, Integer> SCHEMA_ID = createField("schema_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ferret.table.name</code>.
     */
    public final TableField<TableRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>ferret.table</code> table reference
     */
    public Table() {
        this("table", null);
    }

    /**
     * Create an aliased <code>ferret.table</code> table reference
     */
    public Table(String alias) {
        this(alias, TABLE);
    }

    private Table(String alias, org.jooq.Table<TableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Table(String alias, org.jooq.Table<TableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ferret.FERRET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TableRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TableRecord> getPrimaryKey() {
        return Keys.TABLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TableRecord>> getKeys() {
        return Arrays.<UniqueKey<TableRecord>>asList(Keys.TABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TableRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TableRecord, ?>>asList(Keys.TABLE__TABLE_SCHEMA_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Table as(String alias) {
        return new Table(alias, this);
    }

    /**
     * Rename this table
     */
    public Table rename(String name) {
        return new Table(name, null);
    }
}
