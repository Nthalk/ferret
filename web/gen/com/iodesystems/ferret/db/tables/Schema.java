/**
 * This class is generated by jOOQ
 */
package com.iodesystems.ferret.db.tables;


import com.iodesystems.ferret.db.Ferret;
import com.iodesystems.ferret.db.Keys;
import com.iodesystems.ferret.db.tables.records.SchemaRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Schema extends TableImpl<SchemaRecord> {

    private static final long serialVersionUID = -32668388;

    /**
     * The reference instance of <code>ferret.schema</code>
     */
    public static final Schema SCHEMA = new Schema();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemaRecord> getRecordType() {
        return SchemaRecord.class;
    }

    /**
     * The column <code>ferret.schema.id</code>.
     */
    public final TableField<SchemaRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('schema_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>ferret.schema.data_source_id</code>.
     */
    public final TableField<SchemaRecord, Integer> DATA_SOURCE_ID = createField("data_source_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ferret.schema.name</code>.
     */
    public final TableField<SchemaRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>ferret.schema</code> table reference
     */
    public Schema() {
        this("schema", null);
    }

    /**
     * Create an aliased <code>ferret.schema</code> table reference
     */
    public Schema(String alias) {
        this(alias, SCHEMA);
    }

    private Schema(String alias, Table<SchemaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Schema(String alias, Table<SchemaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public org.jooq.Schema getSchema() {
        return Ferret.FERRET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SchemaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SchemaRecord> getPrimaryKey() {
        return Keys.SCHEMA_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SchemaRecord>> getKeys() {
        return Arrays.<UniqueKey<SchemaRecord>>asList(Keys.SCHEMA_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SchemaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SchemaRecord, ?>>asList(Keys.SCHEMA__SCHEMA_DATA_SOURCE_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema as(String alias) {
        return new Schema(alias, this);
    }

    /**
     * Rename this table
     */
    public Schema rename(String name) {
        return new Schema(name, null);
    }
}
